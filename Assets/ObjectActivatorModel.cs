using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class ObjectActivatorModel
{
    [RealtimeProperty(1, true, true)]
    private bool _activeValue;

    [RealtimeProperty(2, true, true)]
    private bool _toggle;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class ObjectActivatorModel : IModel {
    // Properties
    public bool activeValue {
        get { return _cache.LookForValueInCache(_activeValue, entry => entry.activeValueSet, entry => entry.activeValue); }
        set { if (value == activeValue) return; _cache.UpdateLocalCache(entry => { entry.activeValueSet = true; entry.activeValue = value; return entry; }); FireActiveValueDidChange(value); }
    }
    public bool toggle {
        get { return _cache.LookForValueInCache(_toggle, entry => entry.toggleSet, entry => entry.toggle); }
        set { if (value == toggle) return; _cache.UpdateLocalCache(entry => { entry.toggleSet = true; entry.toggle = value; return entry; }); FireToggleDidChange(value); }
    }
    
    // Events
    public delegate void ActiveValueDidChange(ObjectActivatorModel model, bool value);
    public event         ActiveValueDidChange activeValueDidChange;
    public delegate void ToggleDidChange(ObjectActivatorModel model, bool value);
    public event         ToggleDidChange toggleDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool activeValueSet;
        public bool activeValue;
        public bool toggleSet;
        public bool toggle;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public ObjectActivatorModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireActiveValueDidChange(bool value) {
        try {
            if (activeValueDidChange != null)
                activeValueDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireToggleDidChange(bool value) {
        try {
            if (toggleDidChange != null)
                toggleDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        ActiveValue = 1,
        Toggle = 2,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _activeValue = activeValue;
            _toggle = toggle;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteVarint32Length((uint)PropertyID.ActiveValue, _activeValue ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Toggle, _toggle ? 1u : 0u);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.activeValueSet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.ActiveValue, entry.activeValue ? 1u : 0u);
                if (entry.toggleSet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.Toggle, entry.toggle ? 1u : 0u);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteVarint32((uint)PropertyID.ActiveValue, _activeValue ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.Toggle, _toggle ? 1u : 0u);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.activeValueSet || entry.toggleSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.activeValueSet)
                    stream.WriteVarint32((uint)PropertyID.ActiveValue, entry.activeValue ? 1u : 0u);
                if (entry.toggleSet)
                    stream.WriteVarint32((uint)PropertyID.Toggle, entry.toggle ? 1u : 0u);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool activeValueExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.activeValueSet);
        bool toggleExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.toggleSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.ActiveValue: {
                    bool previousValue = _activeValue;
                    
                    _activeValue = (stream.ReadVarint32() != 0);
                    
                    if (!activeValueExistsInChangeCache && _activeValue != previousValue)
                        FireActiveValueDidChange(_activeValue);
                    break;
                }
                case (uint)PropertyID.Toggle: {
                    bool previousValue = _toggle;
                    
                    _toggle = (stream.ReadVarint32() != 0);
                    
                    if (!toggleExistsInChangeCache && _toggle != previousValue)
                        FireToggleDidChange(_toggle);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
